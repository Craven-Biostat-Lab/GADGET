--------------------------------------------------------------------------------
-- set up and populate gene table

CREATE TABLE  `gene` (
  `tax_id` int(11) unsigned DEFAULT NULL,
  `entrez_id` int(11) NOT NULL,
  `symbol` varchar(30) DEFAULT NULL,
  `name` varchar(150) DEFAULT NULL,
  `locustag` varchar(100) DEFAULT NULL,
  `synonyms` varchar(250) DEFAULT NULL,
  `dbXrefs` varchar(250) DEFAULT NULL,
  `chromosome` varchar(7) DEFAULT NULL,
  `maplocation` varchar(100) DEFAULT NULL,
  `description` varchar(250) DEFAULT NULL,
  `abstracts` int(11) DEFAULT NULL,
  `homolog_abstracts` int(11) DEFAULT NULL,
  PRIMARY KEY (`entrez_id`),
  KEY `symbol` (`symbol`,`tax_id`) USING BTREE,
  KEY `gene_tax` (`entrez_id`,`tax_id`),
  KEY `tax_gene` (`tax_id`,`entrez_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8

-- files for humans, mice, and yeast
ftp://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Mammalia/Homo_sapiens.gene_info.gz
ftp://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Mammalia/Mus_musculus.gene_info.gz
--ftp://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Fungi/Saccharomyces_cerevisiae.gene_info.gz

-- once for each species file
load data local infile '~/Downloads/gene_info/Homo_sapiens.gene_info'
into table `gene`
fields terminated by '\t'
(`tax_id`, `entrez_id`, `symbol`, `locustag`, @synonyms, `dbXrefs`, `chromosome`, `maplocation`, `description`, @type, @authsym, `name`, @status, @other, @date)
set `synonyms` := replace(@synonyms, '|', ', ');


-- gene data for yeast (NCBI data is missing some fields)
-- save as "~/Downloafs/SGD/SGD-genes.tsv"
http://yeastmine.yeastgenome.org/yeastmine/service/query/results?query=%3Cquery+name%3D%22%22+model%3D%22genomic%22+view%3D%22Gene.primaryIdentifier+Gene.secondaryIdentifier+Gene.symbol+Gene.name+Gene.sgdAlias+Gene.chromosome.primaryIdentifier+Gene.chromosomeLocation.start+Gene.chromosomeLocation.end+Gene.organism.name%22+longDescription%3D%22List+all+genes+for+the+selected+organism+and+their+chromosomal+locations%2C+nomenclature%2C+sequence+lengths%2C+and+descriptions.%22+sortOrder%3D%22Gene.primaryIdentifier+asc%22+constraintLogic%3D%22%28A+or+B%29+and+%28C+or+D%29+and+E+and+F%22%3E%3Cjoin+path%3D%22Gene.chromosome%22+style%3D%22OUTER%22%2F%3E%3Cjoin+path%3D%22Gene.chromosomeLocation%22+style%3D%22OUTER%22%2F%3E%3Cconstraint+path%3D%22Gene.status%22+code%3D%22D%22+op%3D%22IS+NULL%22%2F%3E%3Cconstraint+path%3D%22Gene.status%22+code%3D%22C%22+op%3D%22%3D%22+value%3D%22Active%22%2F%3E%3Cconstraint+path%3D%22Gene.qualifier%22+code%3D%22B%22+op%3D%22IS+NULL%22%2F%3E%3Cconstraint+path%3D%22Gene.qualifier%22+code%3D%22A%22+op%3D%22%21%3D%22+value%3D%22Dubious%22%2F%3E%3Cconstraint+path%3D%22Gene.dataSets.name%22+code%3D%22F%22+op%3D%22%3D%22+value%3D%22SGD+data+set%22%2F%3E%3Cconstraint+path%3D%22Gene.organism.name%22+code%3D%22E%22+op%3D%22%3D%22+value%3D%22Saccharomyces+cerevisiae%22%2F%3E%3C%2Fquery%3E&format=tab
-- load this into the table after we set up the `sgd_xrefs` table

--------------------------------------------------------------------------------
-- set up and populate the gene_abstract table with gene2pubmed

CREATE TABLE  `gene_abstract` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `gene` int(11) NOT NULL DEFAULT '0',
  `abstract_pmid` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `gene` (`gene`,`abstract_pmid`),
  KEY `abstract_pmid` (`abstract_pmid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8

-- get gene-abstract links from gene2pubmed
ftp://ftp.ncbi.nih.gov/gene/DATA/gene2pubmed.gz

load data local infile '~/Downloads/gene2pubmed'
into table `gene_abstract`
fields terminated by '\t'
ignore 1 lines
(@tax_id, `gene`, `abstract`);

--------------------------------------------------------------------------------
-- get gene-abstract links from SGD

http://downloads.yeastgenome.org/curation/literature/gene_literature.tab
http://downloads.yeastgenome.org/curation/chromosomal_feature/dbxref.tab

-- set up SGD gene-abstract table
CREATE TABLE  `sgd_literature` (
  `abstract` int(11) NOT NULL,
  `sgd_gene_id` char(10) NOT NULL,
  PRIMARY KEY (`abstract`,`sgd_gene_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

load data local infile '~/Downloads/SGD/gene_literature.tab'
into table sgd_literature
fields terminated by '\t'
(`abstract`, @citation, @genename, @feature, @topic, `sgd_gene_id`);

-- get Entrez ID - SGD ID links
CREATE TABLE `sgd_xrefs` (
  `xref_id` int(11) NOT NULL,
  `source` varchar(20) NOT NULL,
  `type` varchar(20) NOT NULL,
  `sgd_gene_id` CHAR(10)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

load data local infile '~/Downloads/SGD/dbxref.tab'
into table `sgd_xrefs`
fields terminated by '\t'
(`xref_id`, `source`, `type`, @name, `sgd_gene_id`, @symbol);

delete from sgd_xrefs
where source != 'NCBI'
or type != 'Gene ID';

ALTER TABLE `new`.`sgd_xrefs` DROP COLUMN `source`,
 DROP COLUMN `type`,
 ADD PRIMARY KEY (`xref_id`, `sgd_gene_id`),
 ADD INDEX `xref_id`(`xref_id`),
 ADD INDEX `sgd_gene_id`(`sgd_gene_id`);
 
insert ignore into gene_abstract
select x.`xref_id` `gene`, l.`abstract`
from `sgd_xrefs` x
inner join `sgd_literature` l
using (sgd_gene_id)
where l.`abstract` != 0;

--------------------------------------------------------------------------------
-- load SGD genes into `gene` table

load data local infile '~/Downloads/SGD/SGD-genes.tsv'
into table `gene`
fields terminated by '\t' optionally enclosed by '"'
(@SGD_ID, @sysname, @symbol, @name, @synonyms, @chromosome, @start, @stop, @species)
set
`tax_id` := 559292,
`entrez_id` := (select `xref_id` from `sgd_xrefs` where `sgd_gene_id` = @SGD_ID),
`symbol` := if(@symbol != "", @symbol, @sysname),
`name` := if(@name != "", @name, '-'),
`synonyms` := if(@synonyms != "", @synonyms, '-'),
`chromosome`:= @chromosome,
`maplocation`:= concat(@chromosome, ": ", @start, " to ", @stop);

--------------------------------------------------------------------------------
-- get MGI gene-abstract links

ftp://ftp.informatics.jax.org/pub/reports/MRK_Reference.rpt
ftp://ftp.informatics.jax.org/pub/reports/MGI_EntrezGene.rpt

create table `mgi_entrez_gene` (
  `mgi_marker` varchar(15) not null,
  `entrez_id` int(11) not null,
  primary key (`mgi_marker`, `entrez_id`)
) engine=MyISAM charset=utf8;

load data local infile '~/Downloads/MGI/MGI_EntrezGene.rpt'
into table `mgi_entrez_gene`
fields terminated by '\t'
(mgi_marker, @symbol, @status, @name, @position, @chromosome, @type, @secondary, entrez_id, @synonyms, @biotypes, @featuretypes);

delete from `mgi_entrez_gene` where `entrez_id` = 0;

create table `mgi_reference` (
  `mgi_marker` varchar(15) not null,
  `abstract_pmid` int(11) not null,
  primary key (`mgi_marker`, `abstract_pmid`)
) engine=MyIsam charset=utf8;

insert ignore into `gene_abstract`
select e.`entrez_id` `gene`, r.`abstract_pmid`
from `mgi_reference` r
inner join `mgi_entrez_gene` e
using (`mgi_marker`);

--------------------------------------------------------------------------------
-- get homologene groups

ftp://ftp.ncbi.nih.gov/pub/HomoloGene/current/homologene.data

CREATE TABLE  `new`.`homologene_gene` (
  `homologene_id` int(11) NOT NULL,
  `gene` int(11) NOT NULL,
  PRIMARY KEY (`homologene_id`,`gene`),
  KEY `gene` (`gene`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

load data local infile '~/Downloads/homologene.data'
into table `homologene_gene`
fields terminated by '\t'
(`homologene_id`, @tax_id, `gene`, @symbol, @gi, @accession);

--------------------------------------------------------------------------------
-- restrict data

-- remove abstracts with more than 1000 genes
create table `toomanygenes`
select `abstract`
from gene_abstract
group by `abstract`
having count(`gene`) > 1000;

delete `gene_abstract`
from `gene_abstract` 
inner join `toomanygenes` using (`abstract`);

-- delete genes with no associated abstracts
create table homologene_gene_abstract
select * from gene_abstract
union
select g.`entrez_id` gene, ga.`abstract`
from `gene` g
inner join `homologene_gene` h1 on h1.`gene` = g.`entrez_id`
inner join `homologene_gene` h2 on h1.`homologene_id` = h2.`homologene_id`
inner join `gene_abstract` ga on h2.`gene` = ga.`gene`;

ALTER TABLE `homologene_gene_abstract` ADD INDEX `gene`(`gene`);

delete `gene`
from `gene`
left join `homologene_gene_abstract`
on `gene`.`entrez_id` = `homologene_gene_abstract`.gene
where `homologene_gene_abstract`.`gene` is null;

--------------------------------------------------------------------------------
-- count abstracts for each gene

update `gene`
set `gene`.`abstracts` = (select count(distinct `abstract`) from `gene_abstract` where `gene_abstract`.`gene` = `gene`.`entrez_id`),
`gene`.`homolog_abstracts` = (select count(distinct `abstract`) from `homologene_gene_abstract` where `homologene_gene_abstract`.`gene` = `gene`.`entrez_id`);

--------------------------------------------------------------------------------
-- fetch abstracts

CREATE TABLE `abstract` (
  `pubmed_id` int(11) NOT NULL,
  `title` varchar(300) DEFAULT NULL,
  `authors` varchar(300) DEFAULT NULL,
  `abstract` text,
  `pubdate` date DEFAULT NULL,
  `journal` varchar(150) DEFAULT NULL,
  `volume` smallint(6) DEFAULT NULL,
  `issue` smallint(6) DEFAULT NULL,
  `pages` varchar(30) DEFAULT NULL,
  `review` tinyint(1) DEFAULT '0',
  `updated` datetime DEFAULT NULL,
  `indexed` datetime DEFAULT NULL,
  `index_dirty` datetime DEFAULT NULL,
  PRIMARY KEY (`pubmed_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8

insert ignore into `abstract` (`pubmed_id`)
select `abstract` from `gene_abstract`;

--------------------------------------------------------------------------------
-- get uniprot crossreferences

-- for each species
ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/by_organism/HUMAN_9606_idmapping.dat.gz
ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/by_organism/MOUSE_10090_idmapping.dat.gz
ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/by_organism/YEAST_559292_idmapping.dat.gz

CREATE TABLE  `uniprot_idrefs` (
  `uniprotKB_AC` varchar(8) DEFAULT NULL,
  `idtype` varchar(20) DEFAULT NULL,
  `id` varchar(50) DEFAULT NULL,
  KEY `uniprotKBAC_idtype` (`uniprotKB_AC`,`idtype`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- for each species
load data local infile '~/Downloads/uniprot-idmaps/HUMAN_9606_idmapping.dat'
into table `uniprot_idrefs`
fields terminated by '\t';

-- re-arrange the table to use the entrez ID as the key instead of the uniprot id
-- takes a couple minutes to run because of the "distinct"
create table gene_crossrefs
select distinct cast(ui1.id as unsigned) `entrez_id`, ui2.`idtype`, ui2.`id` `crossref_id`
from uniprot_idrefs ui1
inner join uniprot_idrefs ui2
using (uniprotKB_AC)
where ui1.idtype = "GeneID";

ALTER TABLE  `gene_crossrefs` ADD INDEX `entrez_id_idtype`(`entrez_id`, `idtype`);

-- insert UniprotKB-AC numbers back into table (lost in previous query)
insert into gene_crossrefs
select `id` entrez_id, 'UniProtKB-AC' idtype, uniprotKB_AC `crossref_id`
from uniprot_idrefs
where idtype="GeneID";

-- delete crossrefs for genes that aren't in our set
delete from gene_crossrefs
where entrez_id not in (select entrez_id from gene);

-- add a primary key to make Django happy
ALTER TABLE `gene_crossrefs` ADD COLUMN `id` INT  NOT NULL AUTO_INCREMENT FIRST,
 ADD PRIMARY KEY (`id`);

-- add keys for BioGPS (use Entrez Gene ID) for humans and mice
insert into gene_crossrefs
select null, g.entrez_id, 'BioGPS', g.entrez_id
from gene g
where g.tax_id = 9606 or g.tax_id = 10090;

-- delete GermOnline keys for yeast (keys don't work)
delete from `gene_crossrefs` where `gene_crossrefs`.`idtype` = "GermOnline" and 
((select g.`tax_id` from `gene` g where `gene_crossrefs`.entrez_id = g.entrez_id)) = 559292;

-- get SGD keys from sgd_xrefs table
insert into gene_crossrefs
select null, `xref_id`, "SGD", `sgd_gene_id`
from sgd_xrefs;
